{"ast":null,"code":"const availableTimesByDate = {\n  \"2023-08-29\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-01\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-02\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-03\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-04\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-05\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-06\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-07\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-08\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-09\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-10\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-11\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-12\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-13\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-14\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-15\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-16\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-17\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-18\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-19\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-20\": [\"14:00\", \"15:00\", \"16:00\"]\n};\nconst fetchAPI = date => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (availableTimesByDate[date]) {\n        resolve(availableTimesByDate[date]);\n      } else {\n        reject(new Error(\"No available times for the selected date.\"));\n      }\n    }, 1000);\n  });\n};\nconst submitAPI = formData => {\n  availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (formData) {\n        resolve(true); // Simulate successful submission\n      } else {\n        reject(new Error(\"Form submission failed.\"));\n      }\n    }, 1000); // Simulate API delay\n  });\n};\n\nexport { fetchAPI, submitAPI };","map":{"version":3,"names":["availableTimesByDate","fetchAPI","date","Promise","resolve","reject","setTimeout","Error","submitAPI","formData","filter","time"],"sources":["/home/kolomiets/Desktop/Universities/React_app/Capstone_project/capstone_project_meta/src/mockAPI.js"],"sourcesContent":["const availableTimesByDate = {\n  \"2023-08-29\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-01\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-02\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-03\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-04\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-05\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-06\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-07\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-08\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-09\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-10\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-11\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-12\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-13\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-14\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-15\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-16\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-17\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-18\": [\"14:00\", \"15:00\", \"16:00\"],\n  \"2023-09-19\": [\"10:00\", \"11:00\", \"12:00\"],\n  \"2023-09-20\": [\"14:00\", \"15:00\", \"16:00\"],\n};\n\nconst fetchAPI = (date) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (availableTimesByDate[date]) {\n        resolve(availableTimesByDate[date]);\n      } else {\n        reject(new Error(\"No available times for the selected date.\"));\n      }\n    }, 1000);\n  });\n};\n\nconst submitAPI = (formData) => {\n  availableTimesByDate[formData.date] = availableTimesByDate[\n    formData.date\n  ].filter((time) => time !== formData.time);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (formData) {\n        resolve(true); // Simulate successful submission\n      } else {\n        reject(new Error(\"Form submission failed.\"));\n      }\n    }, 1000); // Simulate API delay\n  });\n};\n\nexport { fetchAPI, submitAPI };\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG;EAC3B,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;AAC1C,CAAC;AAED,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIN,oBAAoB,CAACE,IAAI,CAAC,EAAE;QAC9BE,OAAO,CAACJ,oBAAoB,CAACE,IAAI,CAAC,CAAC;MACrC,CAAC,MAAM;QACLG,MAAM,CAAC,IAAIE,KAAK,CAAC,2CAA2C,CAAC,CAAC;MAChE;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EAC9BT,oBAAoB,CAACS,QAAQ,CAACP,IAAI,CAAC,GAAGF,oBAAoB,CACxDS,QAAQ,CAACP,IAAI,CACd,CAACQ,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKF,QAAQ,CAACE,IAAI,CAAC;EAE1C,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIG,QAAQ,EAAE;QACZL,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACLC,MAAM,CAAC,IAAIE,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAC9C;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED,SAASN,QAAQ,EAAEO,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}